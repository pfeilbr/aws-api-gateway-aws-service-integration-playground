AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  aws-api-gateway-aws-service-integration-playground.  API Gateway directly invoke aws service.  No lambda in the middle.
Parameters:
  Stage:
    Type: String
    Default: dev

Resources:
  EventBridgeListenerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs12.x
      InlineCode: |
        exports.handler = async (event) => {
          console.log(JSON.stringify(event))
          const response = {
            statusCode: 200,
            body: JSON.stringify('Hello from Lambda!'),
          };
          return response;
        };
      Description: "Blueprint for API Gateway custom authorizers, implemented in NodeJS."
      MemorySize: 256
      Timeout: 5
      Events:
        EBRule:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - "com.mycompany.myapp"

  ApiGatewayRestApi:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: !Sub "${AWS::StackName}-rest-api"

  EventBridgePutEventMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS
        Credentials: !GetAtt APIGatewayEventBridgeAccessRole.Arn
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:events:action/PutEvents"
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          application/json: |
            $input.json("$")
            #set($context.requestOverride.header.X-Amz-Target ="AWSEvents.PutEvents")
            #set($context.requestOverride.header.Content-Type ="application/x-amz-json-1.1")
        IntegrationResponses:
          - StatusCode: 200
      ResourceId: !GetAtt ApiGatewayRestApi.RootResourceId
      RestApiId: !Ref ApiGatewayRestApi
      MethodResponses:
        - StatusCode: 200

  ApiGatewayDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - EventBridgePutEventMethod
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: !Ref Stage

  APIGatewayEventBridgeAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: APIGatewayEventBridgePutEventAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - events:Put*
                Resource: !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:event-bus/default"

Outputs:
  ApiEndpoint:
    Description: "API Gateway endpoint URL for Prod stage for API Gateway Multi-Origin CORS function"
    Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/"
